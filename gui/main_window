import tkinter as tk
from tkinter import ttk, messagebox
import cv2
from PIL import Image, ImageTk
import threading


class ParkingDetectionApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Smart Parking Detection")

        # Camera selection UI
        self.camera_label = ttk.Label(root, text="Camera Index/URL:")
        self.camera_label.pack(pady=5)

        self.camera_entry = ttk.Entry(root)
        self.camera_entry.insert(0, "0")  # default webcam
        self.camera_entry.pack(pady=5)

        self.start_button = ttk.Button(root, text="Start Camera", command=self.start_camera)
        self.start_button.pack(pady=5)

        self.stop_button = ttk.Button(root, text="Stop Camera", command=self.stop_camera, state="disabled")
        self.stop_button.pack(pady=5)

        # Video frame
        self.video_label = ttk.Label(root)
        self.video_label.pack()

        self.cap = None
        self.running = False

    def start_camera(self):
        cam_input = self.camera_entry.get().strip()
        try:
            cam_index = int(cam_input)  # integer index (e.g. 0, 1)
        except ValueError:
            cam_index = cam_input      # assume string (RTSP/HTTP)

        self.cap = cv2.VideoCapture(cam_index)
        if not self.cap.isOpened():
            messagebox.showerror("Error", f"Cannot open camera: {cam_input}")
            return

        self.running = True
        self.start_button.config(state="disabled")
        self.stop_button.config(state="normal")

        threading.Thread(target=self.update_frame, daemon=True).start()

    def update_frame(self):
        while self.running and self.cap.isOpened():
            ret, frame = self.cap.read()
            if not ret:
                break

            # Convert for Tkinter
            frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            img = Image.fromarray(frame)
            imgtk = ImageTk.PhotoImage(image=img)

            self.video_label.imgtk = imgtk
            self.video_label.configure(image=imgtk)

        self.stop_camera()

    def stop_camera(self):
        self.running = False
        self.start_button.config(state="normal")
        self.stop_button.config(state="disabled")
        if self.cap and self.cap.isOpened():
            self.cap.release()
        self.video_label.config(image="")


# Standalone run
if __name__ == "__main__":
    root = tk.Tk()
    app = ParkingDetectionApp(root)
    root.protocol("WM_DELETE_WINDOW", lambda: (app.stop_camera(), root.destroy()))
    root.mainloop()
